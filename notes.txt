A component consists of three things:
- A component class the handles data and functionality
- An HTML template that determines the UI
- Component-specific styles that define the look and feel

Structural directives:
*ngFor,
*ngIf

Angular's interpolation syntax. {{ object.field }}
Interpolation {{ }} lets you render the property value as text.

Property binding [ ] syntax uses a set of brackets
Event binding ( ) syntax uses a set of parentheses

The @Component() decorator indicates that a class is a component.
@Component() also provides metadata about the component,
including its selector, templates, and styles.

The @Input() decorator indicates that the property value
passes in from the component's parent

The @Output() decorator marks a class field as an output property 
and supplies configuration metadata. The DOM property bound to the
output property is automatically updated during change detection.

The RouterLink directive helps you customize the anchor element. 

The currency pipe to transform product.price from a number to a currency string.
A pipe is a way you can transform data in your HTML template.

In Angular, a service is an instance of a class that you can make available 
to any part of your application using Angular's dependency injection system.

Angular HttpClient is a built-in way to fetch data from external APIs
and provide them to your application as a stream.
To use Angular's HttpClient, you must configure your application to use HttpClientModule.
Angular's HttpClientModule registers the providers your application needs to use 
the HttpClient service throughout your application.

The async pipe returns the latest value from a stream of data 
and continues to do so for the life of a given component.
When Angular destroys that component, the async pipe automatically stops.