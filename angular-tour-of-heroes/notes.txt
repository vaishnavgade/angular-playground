The double curly braces are Angular's interpolation binding syntax.
This interpolation binding presents the component's property value inside the HTML header tag.

You always import the Component symbol from the Angular core library
and annotate the component class with @Component.
@Component is a decorator function that specifies the Angular metadata for the component.

Pipes are a good way to format strings, currency amounts, dates, and other display data.
Angular ships with several built-in pipes, and you can create your own.

[(ngModel)] is Angular's two-way data binding syntax.
Although ngModel is a valid Angular directive, it isn't available by default.
It belongs to the optional FormsModule and you must opt in to using it.

Angular needs to know how the pieces of your application fit together and what other files
and libraries the application requires. This information is called metadata.

Some of the metadata is in the @Component decorators that you added to your component classes.
Other critical metadata is in @NgModule decorators.

The most important @NgModule decorator annotates the top-level AppModule class.

Add FormsModule to the imports array in @NgModule.
The imports array contains the list of external modules that the application needs.

Every component must be declared in exactly one NgModule.

(click) is Angular's event binding syntax.
The parentheses around click tell Angular to listen for the <button> element's click event.
When the user clicks in the <button>, Angular executes the onSelect(hero) expression.

The *ngIf directive tells Angular to render the section only when the condition is satisfied.

Angular's class binding can add and remove a CSS class conditionally.
Add [class.some-css-class]="some-condition" to the element you want to style.

Components shouldn't fetch or save data directly, and they certainly shouldn't knowingly 
present fake data. They should focus on presenting data and delegate data access to a service.

If the Angular "Injectable" symbol annotates a class with the @Injectable() decorator,
then this marks the class as one that participates in the dependency injection system.
The class is going to provide an injectable service, and it can also have its own injected dependencies.

The @Injectable() decorator accepts a metadata object for the service, the same way 
the @Component() decorator did for your component classes.

Provider scope for now is in "root". For futher reading :
https://angular.io/tutorial/tour-of-heroes/toh-pt4#provide-the-heroservice
https://angular.io/guide/dependency-injection
https://angular.io/guide/providers

Reserve the constructor for minimal initialization such as wiring constructor parameters
to properties. The constructor shouldn't do anything. 
It certainly shouldn't call a function that makes HTTP requests 
to a remote server as a real data service would.

When you want to use services in a template, you should set it to public in constructor.
Angular only binds to public component properties.

The <router-outlet> tells the router where to display routed views.
The RouterOutlet is one of the router directives that became available to the AppComponent
because AppModule imports AppRoutingModule which exported RouterModule. 
The ng generate command you ran at the start of this tutorial added this import because of
the --module=app flag. 

If you didn't use the ng generate command to create app-routing.module.ts,
import AppRoutingModule into app.module.ts and add it to the imports array of the NgModule.

A routerLink attribute is set to "/heroes", the string that the router matches to the route
to HeroesComponent. The routerLink is the selector for the RouterLink directive that turns
user clicks into router navigations. It's another of the public directives in the RouterModule.

// this.route.snapshot.paramMap.get('id')
The route.snapshot is a static image of the route information shortly after the component was created.
The paramMap is a dictionary of route parameter values extracted from the URL. 
The "id" key returns the id of the hero to fetch.

Mimic communication with a remote data server by using the In-memory Web API module.
After installing the module, the application makes requests to and receive responses 
from the HttpClient. The application doesn't know that the In-memory Web API is intercepting
those requests, applying them to an in-memory data store, and returning simulated responses.

By using the In-memory Web API, you won't have to set up a server to learn about HttpClient.
npm install angular-in-memory-web-api --save

The forRoot() configuration method takes an InMemoryDataService class that primes the in-memory database.
After the server is ready, detach the In-memory Web API so the application's requests can go through to the server.

Define the heroesUrl of the form :base/:collectionName with the address of the heroes
resource on the server. Here base is the resource to which requests are made,
and collectionName is the heroes data object in the in-memory-data-service.ts.

All HttpClient methods return an RxJS Observable of something.
HTTP is a request/response protocol. You make a request, it returns a single response.
In general, an observable can return more than one value over time. 
An observable from HttpClient always emits a single value and then completes, never to emit again.
This particular call to HttpClient.get() returns an Observable<Hero[]>, 
which is an observable of hero arrays. In practice, it only returns a single hero array.

To catch errors, you "pipe" the observable result from http.get() through an RxJS catchError() operator.

After reporting the error to the console, the handler constructs a friendly message and returns a safe value so the application can keep working.
Because each service method returns a different kind of Observable result,
handleError() takes a type parameter to return the safe value as the type that the application expects.

The RxJS tap() operator enables this ability by looking at the observable values, doing something with those values, and passing them along. 
The tap() callback doesn't access the values themselves.

If you neglect to subscribe(), the service can't send the delete request to the server.
As a rule, an Observable does nothing until something subscribes.

AsyncPipe
The *ngFor repeats hero objects. Notice that the *ngFor iterates over a list called heroes$, not heroes. 
The $ is a convention that indicates heroes$ is an Observable, not an array.
<li *ngFor="let hero of heroes$ | async" >

A Subject is both a source of observable values and an Observable itself.
You can subscribe to a Subject as you would any Observable.
You can also push values into that Observable by calling its next(value) method as the search() method does.